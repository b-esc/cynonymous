<?php
include("../utilities.php");

/**
* Creates a new board for users to access
*
* @param PDO_DB_CONNECTION $dbh The connection handle to the database.
* @param int $creator_uid The id of the user creating the post
* @param string $name The name of the board being created
* @param string $description The description of the content that can be found on this board
* @param int $family_friendly Value of 1 or 0 which signals if a board is family friendly or not
* @param string $board_url The all lowercase no spaces name of the board
* @return void
*/
function create_board($dbh, $creator_uid, $name, $description, $family_friendly, $board_url){
    global $boardtable;

	$sql = "INSERT INTO $boardtable(creator_uid, name, description, family_friendly, board_url) 
	VALUES(:creator_uid, :name, :description, :family_friendly, :board_url)";
	$sth = $dbh->prepare($sql);
	try{
		$sth->bindValue(":creator_uid", $creator_uid, PDO::PARAM_INT);
		$sth->bindValue(":name", $name, PDO::PARAM_STR);
		$sth->bindValue(":description", $description, PDO::PARAM_STR);
		$sth->bindValue(":family_friendly", $family_friendly, PDO::PARAM_INT);
		$sth->bindValue(":board_url", $board_url, PDO::PARAM_STR);
		$sth->execute();

	} catch(PDOException $e) {
		echo $e->getMessage();
	}	
}

/**
 * Creates a reply to a post that already exists.
 *
 * @param PDO_DB_CONNECTION $dbh The connection handle to the database.
 * @param int $thread_id The id number of the thread this post will be on.
 * @param int $board_id The id number of the board this post will be on.
 * @param int $creator_uid The id of the user creating this post reply.
 * @param int $parent_id The id number of the post being responded to.
 * @param string $title The title of the post reply.
 * @param string $content The content of the post reply.
 * @param int $anonymous A bit of 0 for a public post or 1 to keep the user anonymous. 
 * @return void
 */
function create_post_reply($dbh, $thread_url, $creator_uid, $parent_id, $title, $content, $anonymous){
    global $posttable;
    $nest_level;
    $thread_id = get_thread_id($dbh, $thread_url);
    $board_id = get_board_id($dbh, $thread_id);

	$sql = "SELECT nest_level FROM $posttable WHERE post_id = :parent_id";
	try{
		$sth = $dbh->prepare($sql);
		$sth->bindValue(':parent_id', $parent_id, PDO::PARAM_INT);
		$sth->execute();
		$nest_level = $sth->fetchAll();
		$nest_level = $nest_level[0]['nest_level'];
	} catch(PDOException $e) {
        echo $e->getMessage();
    }

    try {
        $sql = "INSERT INTO $posttable(thread_id, board_id, creator_uid, parent_id, nest_level, title, content, anonymous) 
            VALUES(:thread_id, :board_id, :creator_uid, :parent_id, :nest_level, :title, :content, :anonymous)";
        $sth = $dbh->prepare($sql);
        $sth->bindValue(':thread_id', $thread_id, PDO::PARAM_INT);
        $sth->bindValue(':board_id', $board_id, PDO::PARAM_INT);
        $sth->bindValue(':creator_uid', $creator_uid, PDO::PARAM_INT);
        $sth->bindValue(':parent_id', $parent_id, PDO::PARAM_INT);
        $sth->bindValue(':nest_level', $nest_level + 1, PDO::PARAM_INT);
        $sth->bindValue(':title', $title, PDO::PARAM_STR);
        $sth->bindValue(':content', $content, PDO::PARAM_STR);
        $sth->bindValue(':anonymous', $anonymous, PDO::PARAM_INT);
        $sth->execute();

        increment_board_posts($dbh, $board_id);
        increment_thread_posts($dbh, $thread_id);
    } catch(PDOException $e) {
        echo $e->getMessage();
    }

}

/**
 * Increments the number of posts that are on the board by 1.
 *
 * @param PDO_DB_CONNECTION $dbh The connection handle to the database.
 * @param int $board_id The id number of the board this post will be on.
 * @return void
 */
function increment_board_posts($dbh, $board_id){
    global $boardtable;

    $sql =  "UPDATE $boardtable SET num_posts = num_posts + 1 WHERE board_id = :board_id";
    $sth = $dbh->prepare($sql);
    $sth->bindValue(":board_id", $board_id, PDO::PARAM_INT);
    $sth->execute();
}

/**
 * Increments the number of posts on the specified thread by 1.
 *
 * @param PDO_DB_CONNECTION $dbh The connection handle to the database.
 * @param int $thread_id The id number of the thread this post will be on.
 * @return void
 */
function increment_thread_posts($dbh, $thread_id){
    global $threadtable;

    $sql = "UPDATE $threadtable SET num_posts = num_posts + 1 WHERE thread_id = :thread_id";
    $sth = $dbh->prepare($sql);
    $sth->bindValue(":thread_id", $thread_id, PDO::PARAM_INT);
    $sth->execute();
}

    /**
     * Echos the integer value of the thread id that corresponds to the given url.
     *
     * @param PDO_DB_CONNECTION $DBH The database connection to use.
     * @param string $url The url to return the thread id of.
     * @return int The id of the thread given by the url.
     */
    function get_thread_id($DBH, $url){
        global $threadtable;
    
        try{
            $query = "SELECT thread_id from $threadtable WHERE thread_url = :url";
            $STH = $DBH->prepare($query);
    
            $STH->execute(["url" => $url]);
        } 
        catch(PDOException $e){
            echo $e->getMessage();
        }
        $STH->setFetchMode(PDO::FETCH_ASSOC);
        if($STH->rowcount() == 1){
            $val_arr = $STH->fetchall();
            $STH = null;
            return $val_arr[0]["thread_id"];
        } else {
            echo "ERROR";
        }
        $STH = null;
    }

    /**
     * Returns the id of the board that contains the given thread.
     *
     * @param PDO_DB_CONNECTION $DBH The database connection to use.
     * @param int $thread_id The id of the thread to search for.
     * @return int The board id of the given thread.
     */
    function get_board_id($DBH, $thread_id){
        global $threadtable;
    
        try{
            $query = "SELECT board_id from $threadtable WHERE thread_id = :id";
            $STH = $DBH->prepare($query);
    
            $STH->execute(["id" => $thread_id]);
        } 
        catch(PDOException $e){
            echo $e->getMessage();
        }
        $STH->setFetchMode(PDO::FETCH_ASSOC);
        if($STH->rowcount() == 1){
            $val_arr = $STH->fetchall();
            $STH = null;
            return $val_arr[0]["board_id"];
        } else {
            echo "ERROR";
        }
        $STH = null;
    }

    /**
 * Returns the thread id of the thread specified by a url.
 *
 * @param PDO_DB_CONNECTION $dbh The connection handle to the database.
 * @param string $url The url of the thread that is concatenated onto the main site url.
 * @return The id of the thread specified by the url.
 */
function board_url_to_id($DBH, $url){
	global $boardtable;

	try{
		$query = "SELECT board_id from $boardtable WHERE board_url = :url";
		$STH = $DBH->prepare($query);

		$STH->execute(["url" => $url]);
	} 
	catch(PDOException $e){
		echo $e->getMessage();
	}
	$STH->setFetchMode(PDO::FETCH_ASSOC);
	if($STH->rowcount() == 1){
		$val_arr = $STH->fetchall();
		$STH = null;
		return $val_arr[0]["board_id"];
	} else {
		echo "ERROR";
	}    
}

/**
 * Creates a thread using the specified values.
 *
 * @param PDO_DB_CONNECTION $dbh The connection handle to the database.
 * @param int $board_id The id number of the board this post will be on.
 * @param int $creator_uid The id of the user creating this post reply.
 * @param string $name The desired name for the thread.
 * @param string $description The desired description for the thread.
 * @param string $thread_url The url that is unique to this thread.
 * @return void
 */
function create_thread($dbh, $board_id, $creator_uid, $name, $description, $thread_url){
	$sql = "insert into threads(board_id, creator_uid, name, description, thread_url) 
		values(:board_id, :creator_uid, :name, :description, :thread_url)";
	try{
	$sth = $dbh->prepare($sql);
	$sth->bindValue(":board_id", $board_id, PDO::PARAM_INT);
	$sth->bindValue(":creator_uid", $creator_uid, PDO::PARAM_INT);
	$sth->bindValue(":name", $name, PDO::PARAM_STR);
	$sth->bindValue(":description", $description, PDO::PARAM_STR);
	$sth->bindValue(":thread_url", $thread_url, PDO::PARAM_STR);
	$sth->execute();

	increment_threads($dbh, $board_id);
	} catch(PDOException $e) {
		echo $e->getMessage();
	}	
	
}

/**
 * Increments the number of threads that are on the board by 1.
 *
 * @param PDO_DB_CONNECTION $dbh The connection handle to the database.
 * @param int $board_id The id number of the thread this post will be on.
 * @return void
 */
function increment_threads($dbh, $board_id){
	$sql = 
		"update boards 
		set num_threads = num_threads + 1
		where board_id = :board_id";
	$sth = $dbh->prepare($sql);
	$sth->bindValue(":board_id", $board_id, PDO::PARAM_INT);
	$sth->execute();
}
