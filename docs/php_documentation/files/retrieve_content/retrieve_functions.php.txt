<?PHP
    include("../utilities.php");

    /**
     * Echos all boards to the client as a json encoded associative array.
     *
     * @param PDO_DB_CONNECTION $DBH The Database connection to use.
     * @return array An array containing all boards
     */
    function get_all_boards($DBH){
        global $boardtable;

        $STH;
        
        try {
            $query = "SELECT board_id, name, description, num_threads num_posts, date_created, board_url FROM $boardtable ORDER BY date_created DESC";
            $STH = $DBH->prepare($query);
            
            $STH -> execute();
        }
        catch(PDOException $e) {
            echo $e->getMessage();
        }
        //tells the query how to return the data --> As an associative array.
        $STH->setFetchMode(PDO::FETCH_ASSOC);
        $array_to_return = $STH->fetchall();
        //$DBH = null;
        //print_r($array_to_return);
        //echo json_encode($array_to_return);
        return $array_to_return;
        //Associative array with keys "name", "description", "num_posts", "date_created"
        //each thread has it's own numeric entry 0,1,2,3... that contains the above keys
    }


    /**
     * Returns a board id from a given board url using the provided database connection.
     * 
     * @param PDO_DB_CONNECTION $DBH The Database connection to use.
     * @param string $url The board url to locate.
     * @return int ID of the board with the provided url.
     */
    function get_board_id($DBH, $url){
        global $boardtable;

        //$DBH = connect_DB();

        try{
            $query = "SELECT board_id from $boardtable WHERE board_url = :url";
            $STH = $DBH->prepare($query);

            $STH->execute(["url" => $url]);
        } 
        catch(PDOException $e){
            echo $e->getMessage();
        }
        $STH->setFetchMode(PDO::FETCH_ASSOC);
        if($STH->rowcount() == 1){
            $val_arr = $STH->fetchall();
            return $val_arr[0]["board_id"];
        } else {
            return 0;
        }
        $STH = null;
        //$DBH = null;        
    }


    /**
     * Echos threads for the board specified by the board id.
     *
     * @param PDO_DB_CONNECTION $DBH The databse conncection to use.
     * @param int $board_id The board id to return the threads of.
     * @return array The threads on the provided board.
     */
    function get_threads($DBH, $board_id){
        global $threadtable;
        //echo $board_id;
        //echo "hello";
        $STH;
        
        try {
            $query = "SELECT thread_id, name, description, num_posts, date_created, thread_url FROM $threadtable WHERE board_id = :board ORDER BY date_created DESC";
            $STH = $DBH->prepare($query);
            
            $STH -> execute(["board" => $board_id]);
        }
        catch(PDOException $e) {
            echo $e->getMessage();
        }
        //tells the query how to return the data --> As an associative array.
        $STH->setFetchMode(PDO::FETCH_ASSOC);
        $array_to_return = $STH->fetchall();
        //$DBH = null;
        //print_r($array_to_return);
        //echo json_encode($array_to_return);
        return $array_to_return;
        //Associative array with keys "name", "description", "num_posts", "date_created"
        //each thread has it's own numeric entry 0,1,2,3... that contains the above keys
    }

   
    /**
 * Returns an array containing the relevent information of 3 random boards.
 *
 * @param PDO_DB_CONNECTION $dbh The connection handle to the database.
 * @return array $id_arr An array with the relevent information to display a board.
 */
function get_featured_boards($dbh){
	$board_arr = array();
	//get all of the current boards
	$sql = "SELECT board_id, name, description, num_threads num_posts, date_created, board_url FROM boards";
	try{
		$sth = $dbh->prepare($sql);
		$sth->execute();
		$board_arr = $sth->fetchAll();
	} catch(PDOException $e) {
		echo $e->getMessage();
	}
	//count the number of boards created
	$size = count($board_arr);

	//select a board from the first third, second third, and last third of created boards
	$first = rand(0, $size / 3);
	$second = rand($size / 3 + 1, (($size / 3) * 2));
	$third = rand((($size / 3) * 2) + 1, $size - 1);

	//get the id of each board and put it into an array
	$id_arr = array();
	$id_arr[] = $board_arr[$first];
	$id_arr[] = $board_arr[$second];
	$id_arr[] = $board_arr[$third];

	return $id_arr;
}


/**
     * Echos featured posts to the client as a json encoded associative array.
     *
     * @param PDO_DB_CONNECTION The database connection to use.
     * @return array The information about the featured posts.
     */
    function get_featured_posts($DBH){
        
        global $posttable;
        $DBH = connect_DB();

        $query = "SELECT title, content FROM $posttable WHERE anonymous = :anon ORDER BY date_created DESC LIMIT 3";
        try { //Creates and prepares queries to be executed (for posts and userinfo)
            $STH = $DBH->prepare($query);
            $STH -> execute(["anon" => "0"]);
        }
        catch(PDOException $e) {
            echo $e->getMessage();
        }
        $STH->setFetchMode(PDO::FETCH_ASSOC);

        $data = $STH->fetchAll();

        //$DBH = null;
        $STH = null;

        //echo json_encode($data);
        return $data;
        //print_r($data);
    }


    /**
 * Retrieves a list of friends as an array.
 *
 * @param PDO_DB_CONNECTION $dbh The connection handle to the database.
 * @param int $uid The id of the user whose friends list is to be retrieved.
 * @return array $friend_arr an array that contains the uid of a friend at each index.
 */
function get_friends_list($dbh, $uid){
	$friends = '';

	//retrieve a list of friends
	$sql = "SELECT friends FROM user_info where id = :uid ";
	try{
		$sth = $dbh->prepare($sql);
		$sth->bindValue(':uid', $uid, PDO::PARAM_INT);
		$sth->execute();
		$friends = $sth->fetchAll();
	} catch(PDOException $e) {
		echo $e->getMessage();
	}

	//change list from array to string
	$friends = $friends[0]['friends'];
	//separate string into an array with a key for each friend
	$friend_arr = explode(',', $friends);

	
	unset($friend_arr[count($friend_arr) - 1]);

	return $friend_arr;
}

/**
     * Echos all posts for the corresponding thread id to the client in a json encoded associative array.
     *
     * @param PDO_DB_CONNECTION $DBH The database connection to use.
     * @param string $thread_id THe thread id to echo the posts of.
     * @return array The posts on the specified thread.
     */
    function get_posts($DBH, $thread_id){
        
        global $posttable, $usertable;
        $STH;
        
        try { //Creates and prepares queries to be executed (for posts and userinfo)
            $query = "SELECT $posttable.post_id, $posttable.title, $posttable.content, $posttable.anonymous, $usertable.username
                from $posttable, $usertable WHERE $posttable.thread_id=:thread AND $usertable.id = $posttable.creator_uid
                ORDER BY $posttable.post_id DESC";
            $STH = $DBH->prepare($query);
            
            $STH -> execute(["thread" => $thread_id]);
        }
        catch(PDOException $e) {
            echo $e->getMessage();
        }
        //tells the query how to return the data --> As an associative array.
        $STH->setFetchMode(PDO::FETCH_ASSOC);
        $array_to_return = $STH->fetchall();
        //$DBH = null;
        //print_r($array_to_return);

        foreach($array_to_return as $key =>$row){
            if($row["anonymous"]){
                $array_to_return[$key]["username"] = "ANONYMOUS";
            }
        }


        //echo json_encode($array_to_return);
        return $array_to_return;
    }


    /**
 * Echos all posts made by the user with the given id to the client as a json encoded associative array.
 * @param PDO_DB_CONNECTION $DBH The database connection to use.
 * @param int $id The id of the user to find the posts of.
 * @return array All posts made by the specified user
 */
function user_posts($DBH, $id){
    //$DBH = connect_DB();
    global $posttable;
    try { //Creates and prepares queries to be executed (for posts and userinfo)
        $query = "SELECT title, content, date_created FROM $posttable WHERE creator_uid=:uid ORDER BY post_id DESC";
        //echo $query;
        $STH = $DBH->prepare($query);
        
        $STH -> execute(["uid" => $id]);
    }
    catch(PDOException $e) {
        echo $e->getMessage();
    }
    //tells the query how to return the data --> As an associative array.
    $STH->setFetchMode(PDO::FETCH_ASSOC);
    $array_to_return = $STH->fetchall();
    //$DBH = null;
    $STH = null;
    //echo json_encode($array_to_return);
    return $array_to_return;
    //echo "Hello";

}
